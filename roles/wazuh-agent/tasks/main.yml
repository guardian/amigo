---
- name: Install required dependencies
  apt:
    state: present
    name: [
        'curl',
        'apt-transport-https',
        'lsb-release',
        'gnupg2',
        'jq'
    ]

- name: Add wazuh apt-key
  apt_key: 
    url: https://packages.wazuh.com/key/GPG-KEY-WAZUH
    state: present 

- name: Add wazuh apt repository
  apt_repository: 
    repo: 'deb https://packages.wazuh.com/4.x/apt/ stable main' 
    state: present 
    filename: wazuh 
    update_cache: yes

- name: Get region
  shell: |
    curl -s -H "X-aws-ec2-metadata-token: `curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`" http://169.254.169.254/latest/meta-data/placement/availability-zone |  sed 's/.$//'
  register: aws_region

- name: Bring in ssm script
  copy:
    src: get-ssm-parameter.sh
    dest: /usr/local/bin/get-ssm-parameter.sh
    mode: 0555

- name: Get secret_arn
  shell: "/usr/local/bin/get-ssm-parameter.sh {{ aws_region.stdout }} /{{ stage }}/deploy/amigo-role/wazuh-agent/secret-arn"
  register: secret_arn
  failed_when: "'error' in secret_arn.stderr"

- name: Get manager address
  shell: "/usr/local/bin/get-ssm-parameter.sh {{ aws_region.stdout }} /{{ stage }}/deploy/amigo-role/wazuh-agent/manager-address"
  register: manager_address
  failed_when: "'error' in manager_address.stderr"

- name: Get agent version
  shell: "/usr/local/bin/get-ssm-parameter.sh {{ aws_region.stdout }} /{{ stage }}/deploy/amigo-role/wazuh-agent/agent-version"
  register: agent_version
  failed_when: "'error' in agent_version.stderr"

- name: Install Wazuh Agent
  apt:
    name: wazuh-agent={{ agent_version.stdout }}
    state: present
    update_cache: yes

- name: Prevent wazuh-agent from being upgraded to a different version
  dpkg_selections:
    name: wazuh-agent
    selection: hold

- name: Store the password
  shell: |
    aws secretsmanager get-secret-value --secret-id "{{ secret_arn.stdout }}" \
       --query SecretString --output text --version-stage AWSCURRENT --region {{ aws_region.stdout }} \
       | jq -r .value > /var/ossec/etc/authd.pass
  register: command_result
  failed_when: "'error' in command_result.stderr"

- name: Inject authentication script
  copy:
    dest: /usr/local/bin/authenticate-with-wazuh-manager.sh
    mode: 0744
    content: |
      #!/bin/bash -xe
      if [ -f "/var/ossec/etc/authd.pass" ]; then
        MANAGER_ADDRESS="{{ manager_address.stdout }}"

        REGION=$(curl -s -H "X-aws-ec2-metadata-token: `curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`" http://169.254.169.254/latest/meta-data/placement/availability-zone |  sed 's/.$//')
        INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: `curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`" http://169.254.169.254/latest/meta-data/instance-id)
        AMI_ID=$(curl -s -H "X-aws-ec2-metadata-token: `curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`" http://169.254.169.254/latest/meta-data/ami-id)

        # force /dev/random to initialise before calling the aws cli (workaround for a regression in Linux/5.4.0-1049-aws)
        dd bs=32 count=1 if=/dev/random of=/dev/null
        ASG_NAME=$(aws autoscaling describe-auto-scaling-instances --region "$REGION" --instance-ids "$INSTANCE_ID" --output text --query "AutoScalingInstances[0].AutoScalingGroupName" || true)

        ARGS="describe-auto-scaling-groups --region "$REGION" --auto-scaling-group-name "$ASG_NAME" --output text"

        APP=$(aws autoscaling $ARGS --query "AutoScalingGroups[0].Tags[?Key == 'App'].Value" || true)
        STACK=$(aws autoscaling $ARGS --query "AutoScalingGroups[0].Tags[?Key == 'Stack'].Value" || true)
        STAGE=$(aws autoscaling $ARGS --query "AutoScalingGroups[0].Tags[?Key == 'Stage'].Value" || true)

        if [ -z "$APP" ] || [ "$APP" == "None"  ]; then
              echo "Failed to fetch ASG tags, fetching instance tags instead"
              FILTERS="Name=resource-id,Values=$INSTANCE_ID Name=resource-type,Values=instance"
              OPTIONS="--query Tags[].Value --output text --region $REGION"
              APP=$(aws ec2 describe-tags --filters $FILTERS Name=key,Values=App $OPTIONS || true)
              STACK=$(aws ec2 describe-tags --filters $FILTERS Name=key,Values=Stack $OPTIONS || true)
              STAGE=$(aws ec2 describe-tags --filters $FILTERS Name=key,Values=Stage $OPTIONS || true)
        else
              echo "Successfully fetched ASG tags"
        fi

        cp /var/ossec/etc/ossec.conf /var/ossec/etc/ossec.conf.bak

        sed -i "s/MANAGER_IP/$MANAGER_ADDRESS/" /var/ossec/etc/ossec.conf
        sed -i "s/<protocol>udp<\/protocol>/<protocol>tcp<\/protocol>/" /var/ossec/etc/ossec.conf
        cat >> /var/ossec/etc/ossec.conf << EOF
        <ossec_config>
          <labels>
            <label key="aws.app">$APP</label>
            <label key="aws.stack">$STACK</label>
            <label key="aws.stage">$STAGE</label>
            <label key="aws.instanceId">$INSTANCE_ID</label>
            <label key="aws.amiId">$AMI_ID</label>
          </labels>
        </ossec_config>
      EOF

        # Enroll with manager
        /var/ossec/bin/agent-auth -m $MANAGER_ADDRESS -A "$STACK-$STAGE-$APP-$INSTANCE_ID"

        # Cleanup
        rm /var/ossec/etc/authd.pass
      fi


- name: Patch wazuh-agent service to call boot script before starting agent
  lineinfile:
    path: /etc/systemd/system/wazuh-agent.service
    insertbefore: '^ExecStart'
    line: ExecStartPre=/usr/local/bin/authenticate-with-wazuh-manager.sh
